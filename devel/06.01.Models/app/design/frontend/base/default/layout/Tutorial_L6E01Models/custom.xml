<?xml version="1.0" encoding="UTF-8"?>

<!--
    All XML Layout schemas are loaded and parsed at every request,
    no matter what controller or module performs operation
    This enables us to supply with our module a layout modification
    for any other module or core component.
-->

<layout>
    <!--

    Here go update handles, direct (immediate) descendants of <layout> node


    Autogenerated update handles.

    <STORE_...>  -  <STORE_default>, <STORE_german>, <STORE_french>, etc.
                    The suffix is Store Code.

    <THEME_..._..._...>  -  <THEME_frontend_rwd_default>, <THEME_frontend_rwd_dyslexia>, etc.
                            The suffix is Areaname_Packagename_Themename.

    <[Full Action Name]>  -  <catalog_product_view>, <Tutorial_L6E01Models_index_layout>, etc
                             The entity is RouteName_controllername_actionname.
                             Here RouteNames are catalog, Tutorial_L6E01Models
                             RouteName is exactly what one defines in config.xml under <routers> node


    Basic Directives.

        update      -   Merge to the current handle all directives from target handle.
        reference   -   Operate on a block referenced by name.
                        Content is merged into target block, immediate actions are invoked in target block.
        remove      -   Set "ignore" flag for the target block.
        block       -   Declare a block.
        action      -   Call a method from targe block.
                        Might be used within block and reference directives, which both define a block context.


    Sketch Structure:
    <layout>
        <layout_update_handle>
            <block ...>     <action ...> ... </action>   </block>
            <reference name='...'>   ...    </reference>
            <update handle='...' />
            <remove name='...' />
        </layout_update_handle>
    </layout>


    Update Handle
    <update handle='LayoutUpdateHandleName' />  -   It is like a reverse-reference , in a way.
                                                    It says, get me that handle updated, and place its content here.

    Remove Block
    <remove name='BlockName' />     -   Disables Block, it won't instantiate at all. No way to re-enable.
                                        Except maybe for overriding module / config.

    Block Declaration.

    <block
        type='...'
        name='...'
        [template='path/to/template/file.phtml']

        [as='alias.tring']              -   Alias is only used in context of a parent block. Name is used everywhere else.
                                            With no alias specified explicitly, the alias wiil equal name.
        [before=['-'|'block.name']]     -   These two are only for
        [after=['-'|'block.name']]      -   context of text_list parent blocks

        [parent='parent.name.or.alias']
        [output=toHtml'']
    >


    Action Directive
    <action
        method='block.method.to.call'
        [translate='child_node_with_text_for_translation ' module=['core'|'...']]

        [helper]
        [json]
        [ifconfig=[""]] - Probes a configuration parameter, action os omitted if false
    >

    Block Method Invokation.

    <action method="aMethodNameToCall">

            <nodenamesdontmatter>  First Argument  </nodenamesdontmatter>
            <lbergibetg>  Whatever the return value of helper method, it might be passed as argument  </lbergibetg>
            <third_argument helper='[ClassGroupName]/classname/method' />
            <fourth_argument json='[ClassGroupName]/classname/method' />

            <arg>  Usually node name is arg or alike  </arg>

            <array>  Values under nodes  </array>
            <array>  With same name  </array>
            <array>  Would align into single argument  </array>
            <array>  An array indexed with integers, zero-based  </array>
            <array>  As you have posibly figured out already  </array>

            <AnotherArray>
                <first>   This would also form array argument  </first>
                <third>   Names of nested nodes would become  </third>
                <enabled> The array keys, so they matter  </enabled>
            </AnotherArray>

            <adfhqetqth> This Mechanism internals don't mind if you  </adfhqetqth>
            <qergqegqer> pass extra parameters that the method doesn't actually take.  </qergqegqer>
            <wtjhwyjyr>  Everything would run smooth, nothing would fail.  </wtjhwyjyr>
    </action>
     -->


    <!-- This is the default update handle -->
    <default>
            <!-- Now we address a "content" block, which happens to be declared in default XML layout -->
            <!-- It is of text_list type, by the way, and render all its children -->
        <reference name="content">
                <!-- Now we add the following block to the "content" block -->
                <!-- It's like cd to a directory and create a file there -->
            <block type="core/text" name="justrandomblock">    <!-- Just for simplicity, to not have a template file -->
                <action method="setText">
                    <arg>That's a text set within a layout xml file XD</arg>
                </action>
            </block>
            <block type="core/text" name="nextrandomblock">
                <action method="setText">
                    <afbgthtbtrh>Node name for argument doesn't really matter.</afbgthtbtrh>
                    <qeh5h46u>Only first node is taken also.</qeh5h46u>
                    <ryjyjktykutd>Magento wouldn't care about extra arguments.</ryjyjktykutd>
                </action>
            </block>

                <!-- Call nonexistent setter of "content" block, will fall back to magic use -->
            <action method="setSomethingNonExistent">
                <arg>This is a string.</arg>
            </action>
        </reference>
    </default>


    <!-- This is a way to update a catalog product view -->
    <catalog_product_view>
            <!-- Now we address a "content" block, which happens to be declared in default XML layout -->
            <!-- It is of text_list type, by the way, and render all its children -->
        <reference name="content">
                <!-- Now we add the following block to the "content" block -->
                <!-- It's like cd to a directory and create a file there -->
            <block type="core/text" name="anotherrandomblock">    <!-- Just for simplicity, to not have a template file -->
                <action method="setText">
                    <arg>That's a text set within a layout xml file!!!</arg>
                </action>
            </block>
        </reference>
    </catalog_product_view>



</layout>